(function() {

  angular

  .module('Time', [])

  // translate an amount of seconds into human-readable format (X years, X days, X hrs, X minutes, X seconds, each where applicable)
  .filter('secondsReadable', function() {

    // seconds is the total amount of seconds for converting. form affects the output (short, medium or long)
    return function(seconds, form) {

      calcs = {};
      calcs.minutes = {};
      calcs.seconds = {};

      format = {};
      format.minutes = {};
      format.seconds = {};

      // calculate float & integer variants for minutes & seconds based on the seconds input
      calcs.minutes.raw = seconds / 60; // example: 530 as 'seconds'
        // 8.83333333333333
      calcs.minutes.round = Math.floor(calcs.minutes.raw);
        // 8
      calcs.seconds.raw = ( calcs.minutes.raw - calcs.minutes.round ) * 60;
        // ( 0.83333333333333 ) --> 49.9999999999998
      calcs.seconds.round = Math.round(calcs.seconds.raw); 
        // 50

      // define formats
      format.minutes.short = ['m', 'm'];
      format.seconds.short = ['s', 's'];
      format.minutes.medium = ['min', 'mins'];
      format.seconds.medium = ['sec', 'secs'];
      format.minutes.long = ['minute', 'minutes'];
      format.seconds.long = ['second', 'seconds'];

      // build the output for display with...
      // the specified time unit (years, days, hours, minutes, seconds)
      // the desired form (short, medium, long)
      // the calculations already performed
      buildOutput = function(unit, form, calcs) {

        var output;

        // are there any units remaining?
        if(calcs[unit].raw != 0) {

          // append actual units into unit output with a space at the end
          output = calcs[unit].round + ' ';

          // if there is more than 1 unit remaining, append the plural form right after the units remaining
          if(calcs[unit].raw > 1) {
            output += format[unit][form][1];
          } else {
            output += format[unit][form][0];
          }
        }

        // return the built output for this particular unit
        return output;
      }

      // concat the outputs together
      var completeOutput = buildOutput('minutes', form, calcs) + ' ' + buildOutput('seconds', form, calcs);
      
      return completeOutput;
      };
  })
})()